#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.3.3 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 30 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 85 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 9 #"Consolas\0"
0 11 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 37
#"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 0 1
#"\0"
0 75 9 #"Consolas\0"
0.0 11 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 1 #"\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 10 #"Monospace\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1 4 32 #"widget.rkt::browser-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 59
#"macro-debugger/syntax-browser/properties color-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 61 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 190 190 190
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 107 142 35 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 100 149 237
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 65 105 225 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 70 130 180 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 47 79 79 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 139 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 75 0 130 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 160 32 240 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 165 0 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 250 128 114
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 184 134 11 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 128 128 0 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 169 169 169
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 224
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 0 0 224
255 255 -1 -1           0 1839 0 26 3 12 #"#lang racket"
0 0 22 29 1 #"\n"
0 0 17 3 34 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 22 29 1 #"\n"
0 0 17 3 35 #";;; 2\302\272 Projecto PA - Grupo 9   ;;;"
0 0 22 29 1 #"\n"
0 0 17 3 35 #";;; 56960 - Jo\303\243o Loff          ;;;"
0 0 22 29 1 #"\n"
0 0 17 3 34 #";;; 64712 - Alexandre Almeida  ;;;"
0 0 22 29 1 #"\n"
0 0 17 3 34 #";;; 64870 - Tiago Aguiar       ;;;"
0 0 22 29 1 #"\n"
0 0 17 3 34 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 30 #";; Tabela de metodos genericos"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 23 #"generic-functions-table"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 9 #"make-hash"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 39 #";; Tabela de todos os metodos concretos"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 22 #"concrete-methods-table"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 9 #"make-hash"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 29 #";; Lista de metodos concretos"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 21 #"concrete-methods-list"
0 0 22 3 3 #") ("
0 0 14 3 4 #"list"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 42 #";; Lista que representa a \303\241rvore de tipos"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 14 #"node-type-tree"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 49
#";; Estrutura para representar fun\303\247\303\265es genericas"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"struct"
0 0 22 3 1 #" "
0 0 14 3 16 #"generic-function"
0 0 22 3 2 #" ("
0 0 14 3 4 #"name"
0 0 22 3 1 #" "
0 0 14 3 10 #"parameters"
0 0 22 3 1 #" "
0 0 14 3 10 #"args-order"
0 0 22 3 13 #") #:property "
0 0 14 3 14 #"prop:procedure"
0 0 22 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"f"
0 0 22 3 1 #" "
0 0 26 3 1 #"."
0 0 22 3 1 #" "
0 0 14 3 11 #"params-list"
0 0 22 3 3 #") ("
0 0 14 3 25 #"generic-function-protocol"
0 0 22 3 2 #" ("
0 0 14 3 33 #"get-concrete-methods-from-generic"
0 0 22 3 2 #" ("
0 0 14 3 21 #"generic-function-name"
0 0 22 3 1 #" "
0 0 14 3 1 #"f"
0 0 22 3 3 #")) "
0 0 14 3 11 #"params-list"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 38 #";; Estrutura para representar m\303\251todos"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"struct"
0 0 22 3 1 #" "
0 0 14 3 15 #"concrete-method"
0 0 22 3 2 #" ("
0 0 14 3 4 #"name"
0 0 22 3 1 #" "
0 0 14 3 5 #"types"
0 0 22 3 1 #" "
0 0 14 3 4 #"func"
0 0 22 3 14 #") #:mutable)  "
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 43 #";; Estrutura para representar n\303\263s de tipos"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"struct"
0 0 22 3 1 #" "
0 0 14 3 9 #"node-type"
0 0 22 3 2 #" ("
0 0 14 3 4 #"name"
0 0 22 3 1 #" "
0 0 14 3 6 #"childs"
0 0 22 3 12 #") #:mutable)"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 50 #";; Get Concrete Methods from generic function name"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 33 #"get-concrete-methods-from-generic"
0 0 22 3 1 #" "
0 0 14 3 4 #"name"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 8 #"hash-ref"
0 0 22 3 1 #" "
0 0 14 3 23 #"generic-functions-table"
0 0 22 3 1 #" "
0 0 14 3 4 #"name"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 29 #";; Metodos da funcao generica"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 24 #"generic-function-methods"
0 0 22 3 1 #" "
0 0 14 3 8 #"function"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 8 #"hash-ref"
0 0 22 3 1 #" "
0 0 14 3 23 #"generic-functions-table"
0 0 22 3 2 #" ("
0 0 14 3 21 #"generic-function-name"
0 0 22 3 1 #" "
0 0 14 3 8 #"function"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 23 #";; Predicados do metodo"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 12 #"method-types"
0 0 22 3 1 #" "
0 0 14 3 6 #"method"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 21 #"concrete-method-types"
0 0 22 3 1 #" "
0 0 14 3 6 #"method"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 40 #";; Gerar uma chave para indexar a tabela"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 12 #"generate-key"
0 0 22 3 1 #" "
0 0 14 3 4 #"name"
0 0 22 3 1 #" "
0 0 14 3 10 #"parameters"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 4 #"cons"
0 0 22 3 1 #" "
0 0 14 3 4 #"name"
0 0 22 3 1 #" "
0 0 14 3 10 #"parameters"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 50
#";; Encontrar um n\303\263 especifico na \303\241rvore de tipos"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 9 #"find-node"
0 0 22 3 1 #" "
0 0 14 3 4 #"tree"
0 0 22 3 1 #" "
0 0 14 3 4 #"node"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 8 #"find-aux"
0 0 22 3 1 #" "
0 0 14 3 8 #"tree-aux"
0 0 22 3 1 #" "
0 0 14 3 4 #"node"
0 0 22 3 1 #" "
0 0 14 3 8 #"node-lst"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 22 3 3 #" (("
0 0 14 3 6 #"empty?"
0 0 22 3 1 #" "
0 0 14 3 8 #"tree-aux"
0 0 22 3 2 #") "
0 0 14 3 8 #"node-lst"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"          (("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 14 3 4 #"node"
0 0 22 3 2 #" ("
0 0 14 3 14 #"node-type-name"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 8 #"tree-aux"
0 0 22 3 5 #"))) ("
0 0 14 3 4 #"cons"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 8 #"tree-aux"
0 0 22 3 2 #") "
0 0 14 3 8 #"node-lst"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 15 3 5 #"begin"
0 0 22 3 2 #" ("
0 0 14 3 4 #"set!"
0 0 22 3 1 #" "
0 0 14 3 8 #"node-lst"
0 0 22 3 2 #" ("
0 0 14 3 8 #"find-aux"
0 0 22 3 2 #" ("
0 0 14 3 16 #"node-type-childs"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 8 #"tree-aux"
0 0 22 3 3 #")) "
0 0 14 3 4 #"node"
0 0 22 3 1 #" "
0 0 14 3 8 #"node-lst"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 24 #"                       ("
0 0 14 3 8 #"find-aux"
0 0 22 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 22 3 1 #" "
0 0 14 3 8 #"tree-aux"
0 0 22 3 2 #") "
0 0 14 3 4 #"node"
0 0 22 3 1 #" "
0 0 14 3 8 #"node-lst"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 8 #"find-aux"
0 0 22 3 1 #" "
0 0 14 3 4 #"tree"
0 0 22 3 1 #" "
0 0 14 3 4 #"node"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 43 #";; Encontrar a profundidade de um dado tipo"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 15 #"find-node-depth"
0 0 22 3 1 #" "
0 0 14 3 4 #"tree"
0 0 22 3 1 #" "
0 0 14 3 4 #"node"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 22 3 3 #" (("
0 0 14 3 13 #"greater-depth"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 5 #"found"
0 0 22 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 14 #"find-depth-aux"
0 0 22 3 1 #" "
0 0 14 3 8 #"tree-aux"
0 0 22 3 1 #" "
0 0 14 3 4 #"node"
0 0 22 3 1 #" "
0 0 14 3 5 #"depth"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"        (("
0 0 14 3 6 #"empty?"
0 0 22 3 1 #" "
0 0 14 3 8 #"tree-aux"
0 0 22 3 3 #") ("
0 0 14 3 4 #"set!"
0 0 22 3 1 #" "
0 0 14 3 5 #"found"
0 0 22 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"        (("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 14 3 4 #"node"
0 0 22 3 2 #" ("
0 0 14 3 14 #"node-type-name"
0 0 22 3 1 #" "
0 0 14 3 8 #"tree-aux"
0 0 22 3 3 #"))("
0 0 14 3 1 #">"
0 0 22 3 1 #" "
0 0 14 3 5 #"depth"
0 0 22 3 1 #" "
0 0 14 3 13 #"greater-depth"
0 0 22 3 3 #"))("
0 0 15 3 5 #"begin"
0 0 22 3 2 #" ("
0 0 14 3 4 #"set!"
0 0 22 3 1 #" "
0 0 14 3 5 #"found"
0 0 22 3 1 #" "
0 0 20 3 2 #"#t"
0 0 22 3 3 #") ("
0 0 14 3 4 #"set!"
0 0 22 3 1 #" "
0 0 14 3 13 #"greater-depth"
0 0 22 3 1 #" "
0 0 14 3 5 #"depth"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 22 3 1 #" "
0 0 14 3 4 #"node"
0 0 22 3 2 #" ("
0 0 14 3 14 #"node-type-name"
0 0 22 3 1 #" "
0 0 14 3 8 #"tree-aux"
0 0 22 3 3 #"))("
0 0 14 3 4 #"set!"
0 0 22 3 1 #" "
0 0 14 3 5 #"found"
0 0 22 3 1 #" "
0 0 20 3 2 #"#t"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"        (("
0 0 14 3 6 #"empty?"
0 0 22 3 2 #" ("
0 0 14 3 16 #"node-type-childs"
0 0 22 3 1 #" "
0 0 14 3 8 #"tree-aux"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"        (("
0 0 14 3 3 #"not"
0 0 22 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 22 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 22 3 2 #" ("
0 0 14 3 16 #"node-type-childs"
0 0 22 3 1 #" "
0 0 14 3 8 #"tree-aux"
0 0 22 3 5 #"))))("
0 0 15 3 5 #"begin"
0 0 22 3 2 #" ("
0 0 14 3 14 #"find-depth-aux"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 2 #" ("
0 0 14 3 16 #"node-type-childs"
0 0 22 3 1 #" "
0 0 14 3 8 #"tree-aux"
0 0 22 3 3 #")) "
0 0 14 3 4 #"node"
0 0 22 3 2 #" ("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 14 3 5 #"depth"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 66
#"                                                                 ("
0 0 14 3 14 #"find-depth-aux"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 22 3 2 #" ("
0 0 14 3 16 #"node-type-childs"
0 0 22 3 1 #" "
0 0 14 3 8 #"tree-aux"
0 0 22 3 4 #"))) "
0 0 14 3 4 #"node"
0 0 22 3 2 #" ("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 14 3 5 #"depth"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 14 3 14 #"find-depth-aux"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 2 #" ("
0 0 14 3 16 #"node-type-childs"
0 0 22 3 1 #" "
0 0 14 3 8 #"tree-aux"
0 0 22 3 3 #")) "
0 0 14 3 4 #"node"
0 0 22 3 2 #" ("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 14 3 5 #"depth"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 19 #"find-node-depth-aux"
0 0 22 3 1 #" "
0 0 14 3 8 #"tree-aux"
0 0 22 3 1 #" "
0 0 14 3 4 #"node"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 22 3 3 #" (("
0 0 14 3 6 #"empty?"
0 0 22 3 1 #" "
0 0 14 3 8 #"tree-aux"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 15 3 5 #"begin"
0 0 22 3 2 #" ("
0 0 14 3 14 #"find-depth-aux"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 8 #"tree-aux"
0 0 22 3 2 #") "
0 0 14 3 4 #"node"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 26 #"                         ("
0 0 14 3 19 #"find-node-depth-aux"
0 0 22 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 22 3 1 #" "
0 0 14 3 8 #"tree-aux"
0 0 22 3 2 #") "
0 0 14 3 4 #"node"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 19 #"find-node-depth-aux"
0 0 22 3 1 #" "
0 0 14 3 4 #"tree"
0 0 22 3 1 #" "
0 0 14 3 4 #"node"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 22 3 1 #" "
0 0 14 3 5 #"found"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 8 #"        "
0 0 14 3 13 #"greater-depth"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 8 #"        "
0 0 20 3 2 #"-1"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 31 #";; Insertir subtipos na \303\241rvore"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 11 #"insert-type"
0 0 22 3 1 #" "
0 0 14 3 4 #"tree"
0 0 22 3 1 #" "
0 0 14 3 5 #"child"
0 0 22 3 1 #" "
0 0 14 3 6 #"parent"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 22 3 3 #" (("
0 0 14 3 10 #"node-child"
0 0 22 3 2 #" ("
0 0 14 3 9 #"node-type"
0 0 22 3 1 #" "
0 0 14 3 5 #"child"
0 0 22 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 14 3 11 #"node-parent"
0 0 22 3 2 #" ("
0 0 14 3 9 #"node-type"
0 0 22 3 1 #" "
0 0 14 3 6 #"parent"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 14 3 10 #"node-child"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 14 3 10 #"parent-aux"
0 0 22 3 2 #" ("
0 0 14 3 9 #"find-node"
0 0 22 3 1 #" "
0 0 14 3 4 #"tree"
0 0 22 3 1 #" "
0 0 14 3 6 #"parent"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 14 3 9 #"child-aux"
0 0 22 3 2 #" ("
0 0 14 3 9 #"find-node"
0 0 22 3 1 #" "
0 0 14 3 4 #"tree"
0 0 22 3 1 #" "
0 0 14 3 5 #"child"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 22 3 3 #" (("
0 0 14 3 2 #"or"
0 0 22 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 22 3 1 #" "
0 0 14 3 4 #"tree"
0 0 22 3 2 #")("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 22 3 1 #" "
0 0 14 3 10 #"parent-aux"
0 0 22 3 2 #")("
0 0 14 3 6 #"empty?"
0 0 22 3 1 #" "
0 0 14 3 9 #"child-aux"
0 0 22 3 4 #")))("
0 0 14 3 4 #"set!"
0 0 22 3 1 #" "
0 0 14 3 14 #"node-type-tree"
0 0 22 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 22 3 1 #" "
0 0 14 3 11 #"node-parent"
0 0 22 3 1 #" "
0 0 14 3 14 #"node-type-tree"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"          (("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 3 #"not"
0 0 22 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 22 3 1 #" "
0 0 14 3 10 #"parent-aux"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 14 3 3 #"not"
0 0 22 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 22 3 1 #" "
0 0 14 3 9 #"child-aux"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 15 3 5 #"begin"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 21 #"set-node-type-childs!"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 10 #"parent-aux"
0 0 22 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 9 #"child-aux"
0 0 22 3 3 #") ("
0 0 14 3 16 #"node-type-childs"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 10 #"parent-aux"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 4 #"set!"
0 0 22 3 1 #" "
0 0 14 3 14 #"node-type-tree"
0 0 22 3 2 #" ("
0 0 14 3 6 #"remove"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 9 #"child-aux"
0 0 22 3 2 #") "
0 0 14 3 14 #"node-type-tree"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"          (("
0 0 14 3 3 #"not"
0 0 22 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 22 3 1 #" "
0 0 14 3 10 #"parent-aux"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 14 3 21 #"set-node-type-childs!"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 10 #"parent-aux"
0 0 22 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 22 3 1 #" "
0 0 14 3 10 #"node-child"
0 0 22 3 2 #" ("
0 0 14 3 16 #"node-type-childs"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 10 #"parent-aux"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 15 3 5 #"begin"
0 0 22 3 2 #" ("
0 0 14 3 4 #"set!"
0 0 22 3 1 #" "
0 0 14 3 14 #"node-type-tree"
0 0 22 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 22 3 2 #" ("
0 0 14 3 9 #"node-type"
0 0 22 3 1 #" "
0 0 14 3 6 #"parent"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 9 #"child-aux"
0 0 22 3 4 #"))) "
0 0 14 3 14 #"node-type-tree"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 24 #"                       ("
0 0 14 3 4 #"set!"
0 0 22 3 1 #" "
0 0 14 3 14 #"node-type-tree"
0 0 22 3 2 #" ("
0 0 14 3 6 #"remove"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 9 #"child-aux"
0 0 22 3 2 #") "
0 0 14 3 14 #"node-type-tree"
0 0 22 3 7 #")))))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 19 #";; Definir subtipos"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 15 3 10 #"defsubtype"
0 0 22 3 1 #" "
0 0 14 3 4 #"type"
0 0 22 3 1 #" "
0 0 14 3 11 #"parent-type"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 11 #"insert-type"
0 0 22 3 1 #" "
0 0 14 3 14 #"node-type-tree"
0 0 22 3 1 #" "
0 0 14 3 4 #"type"
0 0 22 3 1 #" "
0 0 14 3 11 #"parent-type"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 50
#";; Verificar se \303\251 necess\303\241rio redefinir o m\303\251todo"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 20 #"already-have-method?"
0 0 22 3 1 #" "
0 0 14 3 6 #"method"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 13 #"hash-has-key?"
0 0 22 3 1 #" "
0 0 14 3 22 #"concrete-methods-table"
0 0 22 3 1 #" "
0 0 14 3 6 #"method"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 81
(
 #";; Remover o metodo da lista de metodos em caso de ser necessaria um"
 #"a redefinicao"
) 0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 32 #"remove-method-from-concrete-list"
0 0 22 3 1 #" "
0 0 14 3 4 #"name"
0 0 22 3 1 #" "
0 0 14 3 5 #"types"
0 0 22 3 1 #" "
0 0 14 3 12 #"methods-list"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 22 3 3 #" (("
0 0 14 3 3 #"lst"
0 0 22 3 1 #" "
0 0 14 3 12 #"methods-list"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 10 #"remove-aux"
0 0 22 3 1 #" "
0 0 14 3 4 #"name"
0 0 22 3 1 #" "
0 0 14 3 5 #"types"
0 0 22 3 1 #" "
0 0 14 3 16 #"methods-list-aux"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 22 3 2 #" ("
0 0 14 3 20 #"concrete-method-name"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 16 #"methods-list-aux"
0 0 22 3 3 #")) "
0 0 14 3 4 #"name"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ("
0 0 14 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 14 3 21 #"concrete-method-types"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 16 #"methods-list-aux"
0 0 22 3 3 #")) "
0 0 14 3 5 #"types"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 14 3 4 #"set!"
0 0 22 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 2 #" ("
0 0 14 3 6 #"remove"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 16 #"methods-list-aux"
0 0 22 3 2 #") "
0 0 14 3 12 #"methods-list"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 14 3 10 #"remove-aux"
0 0 22 3 1 #" "
0 0 14 3 4 #"name"
0 0 22 3 1 #" "
0 0 14 3 5 #"types"
0 0 22 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 22 3 1 #" "
0 0 14 3 16 #"methods-list-aux"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 10 #"remove-aux"
0 0 22 3 1 #" "
0 0 14 3 4 #"name"
0 0 22 3 1 #" "
0 0 14 3 5 #"types"
0 0 22 3 1 #" "
0 0 14 3 12 #"methods-list"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 14 3 3 #"lst"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 42 #";; Regra para definir o comando defgeneric"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 13 #"define-syntax"
0 0 22 3 1 #" "
0 0 15 3 10 #"defgeneric"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 12 #"syntax-rules"
0 0 22 3 3 #" ()"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 15 3 10 #"defgeneric"
0 0 22 3 1 #" "
0 0 14 3 4 #"name"
0 0 22 3 2 #" ("
0 0 14 3 6 #"params"
0 0 22 3 1 #" "
0 0 14 3 3 #"..."
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 15 3 5 #"begin"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 4 #"name"
0 0 22 3 2 #" ("
0 0 14 3 16 #"generic-function"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"name"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 6 #"params"
0 0 22 3 1 #" "
0 0 14 3 3 #"..."
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 6 #"params"
0 0 22 3 1 #" "
0 0 14 3 3 #"..."
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 9 #"hash-set!"
0 0 22 3 1 #" "
0 0 14 3 23 #"generic-functions-table"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"name"
0 0 22 3 2 #" ("
0 0 14 3 21 #"concrete-methods-list"
0 0 22 3 4 #")))]"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 15 3 10 #"defgeneric"
0 0 22 3 1 #" "
0 0 14 3 4 #"name"
0 0 22 3 2 #" ("
0 0 14 3 6 #"params"
0 0 22 3 1 #" "
0 0 14 3 3 #"..."
0 0 22 3 31 #") (#:argument-precedence-order "
0 0 14 3 10 #"args-order"
0 0 22 3 1 #" "
0 0 14 3 3 #"..."
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 15 3 5 #"begin"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 4 #"name"
0 0 22 3 2 #" ("
0 0 14 3 16 #"generic-function"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"name"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 6 #"params"
0 0 22 3 1 #" "
0 0 14 3 3 #"..."
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 10 #"args-order"
0 0 22 3 1 #" "
0 0 14 3 3 #"..."
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 14 3 9 #"hash-set!"
0 0 22 3 1 #" "
0 0 14 3 23 #"generic-functions-table"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"name"
0 0 22 3 2 #" ("
0 0 14 3 21 #"concrete-methods-list"
0 0 22 3 6 #")))]))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 61
#";; Verificar/Actualizar a ordem de precedencia nos argumentos"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 16 #"check-args-order"
0 0 22 3 1 #" "
0 0 14 3 5 #"types"
0 0 22 3 1 #" "
0 0 14 3 6 #"params"
0 0 22 3 1 #" "
0 0 14 3 10 #"args-order"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 22 3 3 #" (["
0 0 14 3 10 #"hash-types"
0 0 22 3 2 #" ("
0 0 14 3 9 #"make-hash"
0 0 22 3 3 #")])"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 9 #"check-aux"
0 0 22 3 1 #" "
0 0 14 3 4 #"hash"
0 0 22 3 1 #" "
0 0 14 3 10 #"args-order"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 22 3 1 #" "
0 0 14 3 10 #"args-order"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"             "
0 0 14 3 5 #"empty"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 4 #"cons"
0 0 22 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 22 3 1 #" "
0 0 14 3 4 #"hash"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 10 #"args-order"
0 0 22 3 4 #")) ("
0 0 14 3 9 #"check-aux"
0 0 22 3 1 #" "
0 0 14 3 4 #"hash"
0 0 22 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 22 3 1 #" "
0 0 14 3 10 #"args-order"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 22 3 1 #" "
0 0 14 3 6 #"params"
0 0 22 3 1 #" "
0 0 14 3 10 #"args-order"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"   "
0 0 22 3 1 #" "
0 0 22 3 1 #" "
0 0 22 3 1 #" "
0 0 22 3 1 #" "
0 0 22 3 1 #" "
0 0 22 3 1 #" "
0 0 22 3 1 #" "
0 0 22 3 1 #" "
0 0 22 3 1 #" "
0 0 14 3 5 #"types"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 15 3 5 #"begin"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ("
0 0 14 3 4 #"set!"
0 0 22 3 1 #" "
0 0 14 3 10 #"hash-types"
0 0 22 3 2 #" ("
0 0 14 3 11 #"insert-hash"
0 0 22 3 1 #" "
0 0 14 3 10 #"hash-types"
0 0 22 3 1 #" "
0 0 14 3 6 #"params"
0 0 22 3 1 #" "
0 0 14 3 5 #"types"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ("
0 0 14 3 9 #"check-aux"
0 0 22 3 1 #" "
0 0 14 3 10 #"hash-types"
0 0 22 3 1 #" "
0 0 14 3 10 #"args-order"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 11 #"insert-hash"
0 0 22 3 1 #" "
0 0 14 3 4 #"hash"
0 0 22 3 1 #" "
0 0 14 3 6 #"params"
0 0 22 3 1 #" "
0 0 14 3 5 #"types"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 22 3 1 #" "
0 0 14 3 6 #"params"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 14 3 4 #"hash"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 15 3 5 #"begin"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 9 #"hash-set!"
0 0 22 3 1 #" "
0 0 14 3 4 #"hash"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 6 #"params"
0 0 22 3 3 #") ("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 5 #"types"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 11 #"insert-hash"
0 0 22 3 1 #" "
0 0 14 3 4 #"hash"
0 0 22 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 22 3 1 #" "
0 0 14 3 6 #"params"
0 0 22 3 3 #") ("
0 0 14 3 4 #"rest"
0 0 22 3 1 #" "
0 0 14 3 5 #"types"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 14 #";; Teste para "
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 5 #"types"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 14 3 7 #"number?"
0 0 22 3 1 #" "
0 0 14 3 7 #"string?"
0 0 22 3 1 #" "
0 0 14 3 5 #"real?"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 6 #"params"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"y"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"z"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"z"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"y"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 16 #"check-args-order"
0 0 22 3 1 #" "
0 0 14 3 5 #"types"
0 0 22 3 1 #" "
0 0 14 3 6 #"params"
0 0 22 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 41 #";; Regra para definir o comando defmethod"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 18 #"define-syntax-rule"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 9 #"defmethod"
0 0 22 3 1 #" "
0 0 14 3 4 #"name"
0 0 22 3 3 #" (("
0 0 14 3 6 #"params"
0 0 22 3 1 #" "
0 0 14 3 4 #"type"
0 0 22 3 2 #") "
0 0 14 3 3 #"..."
0 0 22 3 2 #") "
0 0 14 3 4 #"body"
0 0 22 3 1 #" "
0 0 14 3 3 #"..."
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 22 3 3 #" (["
0 0 14 3 21 #"concrete-methods-list"
0 0 22 3 2 #" ("
0 0 14 3 33 #"get-concrete-methods-from-generic"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"name"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ["
0 0 14 3 12 #"args-ordered"
0 0 22 3 2 #" ("
0 0 14 3 16 #"check-args-order"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 6 #"params"
0 0 22 3 1 #" "
0 0 14 3 3 #"..."
0 0 22 3 3 #") ("
0 0 14 3 27 #"generic-function-args-order"
0 0 22 3 1 #" "
0 0 14 3 4 #"name"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ["
0 0 14 3 10 #"new-method"
0 0 22 3 2 #" ("
0 0 14 3 15 #"concrete-method"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"name"
0 0 22 3 1 #" "
0 0 20 3 1 #"`"
0 0 22 3 1 #"("
0 0 26 3 1 #","
0 0 14 3 4 #"type"
0 0 22 3 1 #" "
0 0 14 3 3 #"..."
0 0 22 3 3 #") ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 6 #"params"
0 0 22 3 1 #" "
0 0 14 3 3 #"..."
0 0 22 3 2 #") "
0 0 14 3 4 #"body"
0 0 22 3 1 #" "
0 0 14 3 3 #"..."
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ["
0 0 14 3 10 #"method-key"
0 0 22 3 2 #" ("
0 0 14 3 12 #"generate-key"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"name"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 2 #"(("
0 0 14 3 6 #"params"
0 0 22 3 1 #" "
0 0 14 3 4 #"type"
0 0 22 3 2 #") "
0 0 14 3 3 #"..."
0 0 22 3 4 #"))])"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 3 #"not"
0 0 22 3 2 #" ("
0 0 14 3 20 #"already-have-method?"
0 0 22 3 1 #" "
0 0 14 3 10 #"method-key"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 15 3 5 #"begin"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 14 3 9 #"hash-set!"
0 0 22 3 1 #" "
0 0 14 3 23 #"generic-functions-table"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"name"
0 0 22 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 22 3 1 #" "
0 0 14 3 10 #"new-method"
0 0 22 3 1 #" "
0 0 14 3 21 #"concrete-methods-list"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 14 3 9 #"hash-set!"
0 0 22 3 1 #" "
0 0 14 3 22 #"concrete-methods-table"
0 0 22 3 1 #" "
0 0 14 3 10 #"method-key"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 4 #"body"
0 0 22 3 1 #" "
0 0 14 3 3 #"..."
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 15 3 5 #"begin"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 14 3 4 #"set!"
0 0 22 3 1 #" "
0 0 14 3 21 #"concrete-methods-list"
0 0 22 3 2 #" ("
0 0 14 3 32 #"remove-method-from-concrete-list"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"name"
0 0 22 3 1 #" "
0 0 20 3 1 #"`"
0 0 22 3 1 #"("
0 0 26 3 1 #","
0 0 14 3 4 #"type"
0 0 22 3 1 #" "
0 0 14 3 3 #"..."
0 0 22 3 2 #") "
0 0 14 3 21 #"concrete-methods-list"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 14 3 9 #"hash-set!"
0 0 22 3 1 #" "
0 0 14 3 23 #"generic-functions-table"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"name"
0 0 22 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 22 3 1 #" "
0 0 14 3 10 #"new-method"
0 0 22 3 1 #" "
0 0 14 3 21 #"concrete-methods-list"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 14 3 9 #"hash-set!"
0 0 22 3 1 #" "
0 0 14 3 22 #"concrete-methods-table"
0 0 22 3 1 #" "
0 0 14 3 10 #"method-key"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 4 #"body"
0 0 22 3 1 #" "
0 0 14 3 3 #"..."
0 0 22 3 6 #"))))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 39 #";; Verificar se um m\303\251todo \303\251 aplicavel"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 24 #"verify-applicable-method"
0 0 22 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 1 #" "
0 0 14 3 10 #"params-lst"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 22 3 3 #" (("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 22 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 2 #")("
0 0 14 3 6 #"empty?"
0 0 22 3 1 #" "
0 0 14 3 10 #"params-lst"
0 0 22 3 2 #"))"
0 0 20 3 3 #"'#t"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"        ((("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 2 #")("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 10 #"params-lst"
0 0 22 3 4 #")) ("
0 0 14 3 24 #"verify-applicable-method"
0 0 22 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 22 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 3 #") ("
0 0 14 3 4 #"rest"
0 0 22 3 1 #" "
0 0 14 3 10 #"params-lst"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 22 3 1 #" "
0 0 20 3 3 #"'#f"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 56
#";; Verificar se o type-0 \303\251 mais especifico que o type-1"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 18 #"more-specific-type"
0 0 22 3 1 #" "
0 0 14 3 6 #"type-0"
0 0 22 3 1 #" "
0 0 14 3 6 #"type-1"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 22 3 3 #" (("
0 0 14 3 12 #"type-0-depth"
0 0 22 3 2 #" ("
0 0 14 3 15 #"find-node-depth"
0 0 22 3 1 #" "
0 0 14 3 14 #"node-type-tree"
0 0 22 3 1 #" "
0 0 14 3 6 #"type-0"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 12 #"type-1-depth"
0 0 22 3 2 #" ("
0 0 14 3 15 #"find-node-depth"
0 0 22 3 1 #" "
0 0 14 3 14 #"node-type-tree"
0 0 22 3 1 #" "
0 0 14 3 6 #"type-1"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 22 3 3 #" (("
0 0 14 3 1 #">"
0 0 22 3 1 #" "
0 0 14 3 12 #"type-0-depth"
0 0 22 3 1 #" "
0 0 14 3 12 #"type-1-depth"
0 0 22 3 2 #") "
0 0 20 3 2 #"#t"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"          (("
0 0 14 3 1 #"<"
0 0 22 3 1 #" "
0 0 14 3 12 #"type-0-depth"
0 0 22 3 1 #" "
0 0 14 3 12 #"type-1-depth"
0 0 22 3 2 #") "
0 0 20 3 2 #"#f"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 22 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 28 #";; Generic function protocol"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 25 #"generic-function-protocol"
0 0 22 3 1 #" "
0 0 14 3 12 #"methods-list"
0 0 22 3 1 #" "
0 0 14 3 6 #"params"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 22 3 3 #" (("
0 0 14 3 18 #"methods-applicable"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 22 #"get-applicable-methods"
0 0 22 3 1 #" "
0 0 14 3 8 #"meth-lst"
0 0 22 3 1 #" "
0 0 14 3 10 #"params-lst"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 22 3 1 #" "
0 0 14 3 8 #"meth-lst"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"          "
0 0 14 3 18 #"methods-applicable"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 24 #"verify-applicable-method"
0 0 22 3 2 #" ("
0 0 14 3 21 #"concrete-method-types"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 8 #"meth-lst"
0 0 22 3 3 #")) "
0 0 14 3 10 #"params-lst"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ("
0 0 15 3 5 #"begin"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 14 3 4 #"set!"
0 0 22 3 1 #" "
0 0 14 3 18 #"methods-applicable"
0 0 22 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 8 #"meth-lst"
0 0 22 3 2 #") "
0 0 14 3 18 #"methods-applicable"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 14 3 22 #"get-applicable-methods"
0 0 22 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 22 3 1 #" "
0 0 14 3 8 #"meth-lst"
0 0 22 3 2 #") "
0 0 14 3 10 #"params-lst"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ("
0 0 14 3 22 #"get-applicable-methods"
0 0 22 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 22 3 1 #" "
0 0 14 3 8 #"meth-lst"
0 0 22 3 2 #") "
0 0 14 3 10 #"params-lst"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 20 #"more-specific-method"
0 0 22 3 1 #" "
0 0 14 3 8 #"method-0"
0 0 22 3 1 #" "
0 0 14 3 8 #"method-1"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 24 #"more-specific-method-aux"
0 0 22 3 1 #" "
0 0 14 3 11 #"types-lst-0"
0 0 22 3 1 #" "
0 0 14 3 11 #"types-lst-1"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 15 3 4 #"cond"
0 0 22 3 3 #" (("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 22 3 1 #" "
0 0 14 3 11 #"types-lst-0"
0 0 22 3 2 #")("
0 0 14 3 6 #"empty?"
0 0 22 3 1 #" "
0 0 14 3 11 #"types-lst-1"
0 0 22 3 3 #")) "
0 0 20 3 2 #"#f"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"              (("
0 0 14 3 18 #"more-specific-type"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 11 #"types-lst-0"
0 0 22 3 2 #")("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 11 #"types-lst-1"
0 0 22 3 2 #"))"
0 0 20 3 2 #"#t"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ("
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 14 3 24 #"more-specific-method-aux"
0 0 22 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 22 3 1 #" "
0 0 14 3 11 #"types-lst-0"
0 0 22 3 3 #") ("
0 0 14 3 4 #"rest"
0 0 22 3 1 #" "
0 0 14 3 11 #"types-lst-1"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 24 #"more-specific-method-aux"
0 0 22 3 2 #" ("
0 0 14 3 21 #"concrete-method-types"
0 0 22 3 1 #" "
0 0 14 3 8 #"method-0"
0 0 22 3 2 #")("
0 0 14 3 21 #"concrete-method-types"
0 0 22 3 1 #" "
0 0 14 3 8 #"method-1"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 22 3 2 #" ("
0 0 14 3 22 #"get-applicable-methods"
0 0 22 3 1 #" "
0 0 14 3 12 #"methods-list"
0 0 22 3 1 #" "
0 0 14 3 6 #"params"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 5 #"error"
0 0 22 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 6 #"Method"
0 0 19 3 1 #" "
0 0 19 3 7 #"missing"
0 0 19 3 1 #" "
0 0 19 3 14 #"for arguments\""
0 0 22 3 1 #" "
0 0 14 3 6 #"params"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 5 #"apply"
0 0 22 3 2 #" ("
0 0 14 3 20 #"concrete-method-func"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 2 #" ("
0 0 14 3 4 #"sort"
0 0 22 3 1 #" "
0 0 14 3 18 #"methods-applicable"
0 0 22 3 1 #" "
0 0 14 3 20 #"more-specific-method"
0 0 22 3 4 #"))) "
0 0 14 3 6 #"params"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 30 #";(defsubtype complex? number?)"
0 0 22 29 1 #"\n"
0 0 17 3 28 #";(defsubtype real? complex?)"
0 0 22 29 1 #"\n"
0 0 17 3 29 #";(defsubtype rational? real?)"
0 0 22 29 1 #"\n"
0 0 17 3 32 #";(defsubtype integer? rational?)"
0 0 22 29 1 #"\n"
0 0 17 3 28 #";(defsubtype zero? integer?)"
0 0 22 29 1 #"\n"
0 0 17 3 28 #";(defsubtype even? integer?)"
0 0 22 29 1 #"\n"
0 0 17 3 27 #";(defsubtype odd? integer?)"
0 0 22 29 1 #"\n"
0 0 17 3 25 #";(defsubtype zero? even?)"
0 0 22 29 1 #"\n"
0 0 17 3 27 #";(defsubtype string? char?)"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 7         685 4           0 0           0 113 0 22 3 1 #"("
0 0 15 3 10 #"defgeneric"
0 0 22 3 1 #" "
0 0 14 3 3 #"add"
0 0 22 3 2 #" ("
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 14 3 1 #"y"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 9 #"defmethod"
0 0 22 3 1 #" "
0 0 14 3 3 #"add"
0 0 22 3 3 #" (("
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 14 3 8 #"integer?"
0 0 22 3 2 #")("
0 0 14 3 1 #"y"
0 0 22 3 1 #" "
0 0 14 3 8 #"integer?"
0 0 22 3 3 #"))("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 14 3 1 #"y"
0 0 22 3 1 #" "
0 0 20 3 2 #"20"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 9 #"defmethod"
0 0 22 3 1 #" "
0 0 14 3 3 #"add"
0 0 22 3 3 #" (("
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 14 3 7 #"number?"
0 0 22 3 2 #")("
0 0 14 3 1 #"y"
0 0 22 3 1 #" "
0 0 14 3 7 #"number?"
0 0 22 3 3 #"))("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 14 3 1 #"y"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 9 #"defmethod"
0 0 22 3 1 #" "
0 0 14 3 3 #"add"
0 0 22 3 3 #" (("
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 14 3 7 #"string?"
0 0 22 3 2 #")("
0 0 14 3 1 #"y"
0 0 22 3 1 #" "
0 0 14 3 7 #"string?"
0 0 22 3 3 #"))("
0 0 14 3 13 #"string-append"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 14 3 1 #"y"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 10 #"defgeneric"
0 0 22 3 1 #" "
0 0 14 3 4 #"fact"
0 0 22 3 2 #" ("
0 0 14 3 1 #"n"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 9 #"defmethod"
0 0 22 3 1 #" "
0 0 14 3 4 #"fact"
0 0 22 3 3 #" (("
0 0 14 3 1 #"n"
0 0 22 3 1 #" "
0 0 14 3 5 #"zero?"
0 0 22 3 3 #")) "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 9 #"defmethod"
0 0 22 3 1 #" "
0 0 14 3 4 #"fact"
0 0 22 3 3 #" (("
0 0 14 3 1 #"n"
0 0 22 3 1 #" "
0 0 14 3 8 #"integer?"
0 0 22 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 2 #" ("
0 0 14 3 4 #"fact"
0 0 22 3 2 #" ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 4 #"))))"
0           0 0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 11 #";; AUXILIAR"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 10 #"print-tree"
0 0 22 3 1 #" "
0 0 14 3 4 #"tree"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 22 3 1 #" "
0 0 14 3 4 #"tree"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 7 #"display"
0 0 22 3 1 #" "
0 0 14 3 4 #"tree"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 15 3 5 #"begin"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 7 #"display"
0 0 22 3 1 #" "
0 0 19 3 7 #"\"NOME \""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 7 #"display"
0 0 22 3 2 #" ("
0 0 14 3 14 #"node-type-name"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 4 #"tree"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 7 #"newline"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 10 #"print-tree"
0 0 22 3 2 #" ("
0 0 14 3 16 #"node-type-childs"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 4 #"tree"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 10 #"print-tree"
0 0 22 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 22 3 1 #" "
0 0 14 3 4 #"tree"
0 0 22 3 5 #")))))"
0           0
